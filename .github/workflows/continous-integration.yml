# name: Stage One

# on:
#   push:
#   pull_request:
#     types: [opened, reopened]
#     branches:
#       - develop
#       - main

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v3

#       - uses: actions/cache@v3
#         with:
#           path: |
#             ~/.nuget/packages
#             !~/.nuget/packages/unwanted
#           key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
#           restore-keys: |
#             ${{ runner.os }}-nuget-

#       - name: Setup .NET Core
#         uses: actions/setup-dotnet@v3
#         with:
#           global-json-file: global.json

#       - name: Install dependencies
#         run: dotnet restore

#       - name: Build
#         run: dotnet build -c Release --no-restore

#   integration-test:
#     name: Build & Test
#     runs-on: ubuntu-latest
#     needs: [build]
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Setup .NET
#         uses: actions/setup-dotnet@v1
#         with:
#           dotnet-version: 6.0.x

#       - name: Restore Dependencies
#         run: dotnet restore

#       - name: Build
#         run: dotnet build --configuration Release --no-restore

#       - name: Test for Coverage
#         run: dotnet test --logger "trx;LogFileName=test-results.trx"

#       - name: Report Tests
#         id: report-tests
#         uses: dorny/test-reporter@v1
#         with:
#           name: .Net Tests
#           path: "**/test-results.trx"
#           reporter: dotnet-trx

#       - name: Add Test Result PR Comment
#         uses: marocchino/sticky-pull-request-comment@v2
#         if: github.event_name == 'pull_request'
#         with:
#           hide_and_recreate: true
#           hide_classify: "OUTDATED"
#           message: Tests run with ${{ steps.report-tests.outputs.passed }} passed and ${{ steps.report-tests.outputs.failed }} failed in ${{ steps.report-tests.outputs.time }}ms.

#   # analysis:
#   #   name: Build and analyze
#   #   runs-on: windows-latest
#   #   needs: [build]
#   #   steps:
#   #     - name: Set up JDK 11
#   #       uses: actions/setup-java@v1
#   #       with:
#   #         java-version: 1.11
#   #     - uses: actions/checkout@v3
#   #       with:
#   #         fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
#   #     - name: Cache SonarCloud packages
#   #       uses: actions/cache@v1
#   #       with:
#   #         path: ~\sonar\cache
#   #         key: ${{ runner.os }}-sonar
#   #         restore-keys: ${{ runner.os }}-sonar
#   #     - name: Cache SonarCloud scanner
#   #       id: cache-sonar-scanner
#   #       uses: actions/cache@v1
#   #       with:
#   #         path: .\.sonar\scanner
#   #         key: ${{ runner.os }}-sonar-scanner
#   #         restore-keys: ${{ runner.os }}-sonar-scanner
#   #     - name: Setup .NET Core
#   #       uses: actions/setup-dotnet@v3
#   #       with:
#   #         global-json-file: global.json
#   #     - name: Install SonarCloud scanner
#   #       if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
#   #       shell: powershell
#   #       run: |
#   #         New-Item -Path .\.sonar\scanner -ItemType Directory
#   #         dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
#   #     - name: Build and analyze
#   #       env:
#   #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
#   #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#   #       shell: powershell
#   #       run: |
#   #         .\.sonar\scanner\dotnet-sonarscanner begin /k:"AnswerKing" /o:"kirbyalasdairanswer" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
#   #         dotnet tool install --global dotnet-coverage
#   #         dotnet build --no-incremental
#   #         dotnet-coverage collect 'dotnet test' -f xml  -o 'coverage.xml'
#   #         .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
